theme_bw()
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = SBR_d, fill = HCR)) +
theme_bw()
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = Fadjust, fill = HCR)) +
theme_bw() +
ylab("F/F30%")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
# Chunk 2: initial_setup
library(tidyr)
library(dplyr)
library(ggplot2)
#Specify path of parent directory
pdir <- "D:/OneDrive - IATTC/IATTC/2025/MSE/Test/"
#Specify the path of conditioned initial OM
sdir <- "D:/OneDrive - IATTC/IATTC/2025/SAC16/BET F30/"
# Dimensions
niterations <- 12
nyears <- 18
nquarters <- nyears * 4
Mcycle <- 3
nsteps <- nyears / Mcycle
endquarter <- 196
startquarter <- 17
n_extra_R <- 2 #number of assessment period recruitment in the projection
OM_name <- c("Fix-1-1", "Sel-1-1", "Gro-1-1", "Mrt-1-1")
HCR_name <- c("HCR_staff_0", "HCR_staff_0_Fscaler")
# Set the harvest strategy
HSnum <- 1
HS <- paste0("HS", HSnum, "/")
# Chunk 3: management_output
for (HCRnum in 1:length(HCR_name)) {
# Set the HCR
HCR <- paste0(HCR_name[HCRnum], "/")
for (OMnum in 1:length(OM_name)) {
# Set the scenario
OM <- paste0(OM_name[OMnum], "/")
# extract saved management output
for (itrnum in 1:niterations) {
itr = paste0("itr", itrnum, "/")
skip_to_next <- FALSE
tryCatch({
Record <- read.csv(paste0(paste0(pdir, HS, HCR, OM, itr, "Record.csv")))
Record$Step <- 1:nsteps
Record$OM <- OM
Record$itr <- itrnum
Record$HCR <- HCR_name[HCRnum]
if (HCRnum == 1 & OMnum == 1 & itrnum == 1)
Record_all <- Record
else
Record_all <- rbind(Record_all, Record)
}, error = function(e) {
skip_to_next <<- TRUE
})
if (skip_to_next) {
next
}
}
}
}
Record_all_count <- Record_all %>%
filter(Step == nsteps, max_gradient < 0.1) %>%
group_by(HCR, OM) %>%
summarise(count = n())
Record_all_failed <- Record_all %>%
filter(Step == nsteps) %>%
filter(max_gradient > 0.1 | is.na(max_gradient)) %>%
select(OM, itr) %>%
mutate(Flag = 0)
Record_all <- left_join(Record_all, Record_all_failed) %>%
filter(is.na(Flag))
Record_all$itr <- as.factor(Record_all$itr)
Record_all$Step <- as.factor(Record_all$Step)
Record_all$HCR <- as.factor(Record_all$HCR)
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = closure, fill = HCR)) +
theme_bw()
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = SBR_d, fill = HCR)) +
theme_bw()
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = Fadjust, fill = HCR)) +
theme_bw() +
ylab("F/F30%")
for (HCRnum in 1:length(HCR_name)) {
for (HCRnum in 1:length(HCR_name)) {
for (HCRnum in 1:length(HCR_name)) {
for (HCRnum in 1:length(HCR_name)) {
# Set the HCR
HCR <- paste0(HCR_name[HCRnum], "/")
for (OMnum in 1:length(OM_name)) {
# Set the scenario
OM <- paste0(OM_name[OMnum], "/")
for (itrnum in 1:niterations) {
itr = paste0("itr", itrnum, "/")
skip_to_next <- FALSE
tryCatch({
Output <- read.csv(paste0(paste0(
pdir, HS, HCR, OM, itr, "Output.csv"
)))
Output$OM <- OM
Output$itr <- itrnum
if (HCRnum == 1 & OMnum == 1 & itrnum == 1)
Output_all <- Output
else
Output_all <- rbind(Output_all, Output)
}, error = function(e) {
skip_to_next <<- TRUE
})
if (skip_to_next) {
next
}
}
}
}
for (HCRnum in 1:length(HCR_name)) {
# Set the HCR
HCR <- paste0(HCR_name[HCRnum], "/")
for (OMnum in 1:length(OM_name)) {
# Set the scenario
OM <- paste0(OM_name[OMnum], "/")
for (itrnum in 1:niterations) {
itr = paste0("itr", itrnum, "/")
skip_to_next <- FALSE
tryCatch({
Output <- read.csv(paste0(paste0(
pdir, HS, HCR, OM, itr, "Output.csv"
)))
Output$OM <- OM
Output$itr <- itrnum
Output$HCR <- HCR_name[HCRnum]
if (HCRnum == 1 & OMnum == 1 & itrnum == 1)
Output_all <- Output
else
Output_all <- rbind(Output_all, Output)
}, error = function(e) {
skip_to_next <<- TRUE
})
if (skip_to_next) {
next
}
}
}
}
Output_all_long <- Output_all %>%
mutate(itr = as.factor(itr),
Year = Year / 4 + 1974.875,
year = floor(Year) + 0.5) %>%
gather(2:7, key = "Quantity", value = "Value") %>%
filter(Quantity %in% c("Catch", "SB", "SBR", "SBR_d"))
output_all_old <- Output_all_long %>%
filter(Year < 2024)
output_all_new <- Output_all_long %>%
filter(Year > 2024, Year < max(Year))
SB_all <- output_all_old %>% filter(Quantity == "SBR_d", itr == 1, (Year-floor(Year)) == 0.125)
SB_all_mean <- SB_all %>%
group_by(Year) %>%
summarise(Value = mean(Value))
ggplot() +
geom_point(aes(x = Year, y = Value, color = OM), alpha = 1, data = SB_all) +
geom_line(aes(x = Year, y = Value, color = OM), alpha = 1, data = SB_all) +
geom_point(aes(x = Year, y = Value), alpha = 1, data = SB_all_mean) +
geom_line(aes(x = Year, y = Value), alpha = 1, data = SB_all_mean) +
geom_hline(yintercept = 0.2) +
geom_hline(yintercept = 0.3) +
theme_bw() +
ylab("SBR_d")
ggplot() +
geom_boxplot(aes(x = factor(year), y = Value, fill = OM), data = output_all_new) +
facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot() +
geom_boxplot(aes(x = factor(year), y = Value, fill = HCR), data = output_all_new) +
facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot() +
geom_violin(aes(x = factor(year), y = Value, fill = HCR), data = output_all_new) +
facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot() +
geom_boxplot(aes(x = factor(year), y = Value, fill = HCR), data = output_all_new) +
facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
Output_all_long <- Output_all %>%
mutate(itr = as.factor(itr),
Year = Year / 4 + 1974.875,
year = floor(Year) + 0.5)
Output_all <- Output_all %>%
mutate(itr = as.factor(itr),
Year = Year / 4 + 1974.875,
year = floor(Year) + 0.5)
View(Output_all)
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch))
View(Catch)
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch)) %>%
group_by(HCR, year) %>%
mutate(Catch_low = quantile(0.1),
Catch_medium = quantile(0.5),
Catch_high = quantile(0.9))
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch)) %>%
group_by(HCR, year) %>%
mutate(Catch_low = quantile(Catch_annual, 0.1),
Catch_medium = quantile(Catch_annual, 0.5),
Catch_high = quantile(Catch_annual, 0.9))
?quantile
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch))
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch)) %>%
group_by(HCR, year) %>%
mutate(Catch_low = quantile(Catch_annual, 0.1),
Catch_medium = quantile(Catch_annual, 0.5),
Catch_high = quantile(Catch_annual, 0.9))
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch))
summary(Catch)
View(Catch)
Catch <- Output_all %>%
group_by(HCR, OM, itr, year) %>%
summarise(Catch_annual = sum(Catch)) %>%
group_by(HCR, year) %>%
mutate(Catch_low = quantile(Catch_annual, 0.1, na.rm = TRUE),
Catch_medium = quantile(Catch_annual, 0.5, na.rm = TRUE),
Catch_high = quantile(Catch_annual, 0.9, na.rm = TRUE))
ggplot(data = Catch) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR)) +
geom_line(aes(x = year, y = Catch_medium, fill = HCR)) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot(data = Catch) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR)) +
geom_line(aes(x = year, y = Catch_medium, color = HCR)) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot(data = Catch) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR), alpha = 0.25) +
geom_line(aes(x = year, y = Catch_medium, color = HCR)) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot(data = Catch %>% filter(year > 2023)) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR), alpha = 0.25) +
geom_line(aes(x = year, y = Catch_medium, color = HCR)) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot(data = Catch %>% filter(year > 2023)) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR), alpha = 0.25) +
geom_line(aes(x = year, y = Catch_medium, color = HCR), size = 2) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
ggplot(data = Catch %>% filter(year > 2023)) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR), alpha = 0.25) +
geom_line(aes(x = year, y = Catch_medium, color = HCR), linewidth = 2) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
summary(Catch)
ggplot(data = Catch %>% filter(year > 2023)) +
geom_ribbon(aes(x = year, ymin = Catch_low, ymax = Catch_high, fill = HCR), alpha = 0.25) +
geom_line(aes(x = year, y = Catch_medium, color = HCR), linewidth = 1) +
# facet_wrap(~Quantity, scales = "free_y", nrow = 2) +
theme_bw()
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
# Chunk 2: initial_setup
library(tidyr)
library(dplyr)
library(ggplot2)
# Specify path of parent directory
pdir = "D:/OneDrive - IATTC/IATTC/2025/MSE/Test/"
# Specify the path of conditioned initial OM
sdir = "D:/OneDrive - IATTC/IATTC/2025/SAC16/BET F30/"
# Dimensions
library(IATTCMSE)
library(foreach)
library(doParallel)
#Specify path of parent directory
pdir <- "D:/OneDrive - IATTC/IATTC/2025/MSE/Test/"
#Specify the path of conditioned initial OM
sdir <- "D:/OneDrive - IATTC/IATTC/2025/SAC16/BET F30/"
# Dimensions
niterations <- 6
nyears <- 18
nquarters <- nyears * 4
Mcycle <- 3
nsteps <- nyears / Mcycle
endquarter <- 196
startquarter <- 17
n_extra_R <- 2 #number of assessment period recruitment in the projection
OM_name <- c("Fix-1-1", "Sel-1-1", "Gro-1-1", "Mrt-1-1")[1:4]
HCR_name <-  "HCR_staff_Fscaler"
# Set the harvest strategy
HSnum <- 1
HS <- paste0("HS", HSnum, "/")
# Set the HCR
HCR <- paste0(HCR_name, "/")
# Chunk 3: management_output
for (OMnum in 1:length(OM_name)) {
# Set the scenario
OM <- paste0(OM_name[OMnum], "/")
# extract saved management output
for (itrnum in 1:niterations) {
itr = paste0("itr", itrnum, "/")
skip_to_next <- FALSE
tryCatch({
Record <- read.csv(paste0(paste0(pdir, HS, HCR, OM, itr, "Record.csv")))
Record$Step <- 1:nsteps
Record$OM <- OM
Record$itr <- itrnum
if (OMnum == 1 & itrnum == 1)
Record_all <- Record
else
Record_all <- rbind(Record_all, Record)
}, error = function(e) {
skip_to_next <<- TRUE
})
if (skip_to_next) {
next
}
}
}
Record_all_count <- Record_all %>%
filter(Step == nsteps, max_gradient < 0.05) %>%
group_by(OM) %>%
summarise(count = n())
Record_all_failed <- Record_all %>%
filter(Step == nsteps) %>%
filter(max_gradient > 0.05 | is.na(max_gradient)) %>%
select(OM, itr) %>%
mutate(Flag = 0)
Record_all <- left_join(Record_all, Record_all_failed) %>%
filter(is.na(Flag))
Record_all$itr <- as.factor(Record_all$itr)
Record_all$Step <- as.factor(Record_all$Step)
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = closure, fill = OM)) +
theme_bw()
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = SBR_d, fill = OM)) +
theme_bw()
ggplot(data = Record_all) +
geom_boxplot(aes(x = Step, y = Fadjust, fill = OM)) +
theme_bw() +
ylab("F/F30%")
# ggplot(data = Record_all) +
#   geom_boxplot(aes(x = Step, y = (Time_Stamp - min(Time_Stamp))/60, fill = OM)) +
#   theme_bw() +
#   ylab("Time chart in minute")
for (OMnum in 1:length(OM_name)) {
# Set the scenario
OM <- paste0(OM_name[OMnum], "/")
for (itrnum in 1:niterations) {
itr = paste0("itr", itrnum, "/")
skip_to_next <- FALSE
tryCatch({
Output <- read.csv(paste0(paste0(pdir, HS, HCR, OM, itr, "Output.csv")))
Output$OM <- OM
Output$itr <- itrnum
if (OMnum == 1 & itrnum == 1)
Output_all <- Output
else
Output_all <- rbind(Output_all, Output)
}, error = function(e) {
skip_to_next <<- TRUE
})
if (skip_to_next) {
next
}
}
}
Output_all_long <- Output_all %>%
mutate(itr = as.factor(itr),
Year = Year / 4 + 1974.875,
year = floor(Year) + 0.5) %>%
gather(2:7, key = "Quantity", value = "Value") %>%
filter(Quantity %in% c("Catch", "SB", "SBR", "SBR_d"))
output_all_old <- Output_all_long %>%
filter(Year < 2024)
output_all_new <- Output_all_long %>%
filter(Year > 2024, Year < max(Year))
SB_all <- output_all_old %>% filter(Quantity == "SBR_d", itr == 1, (Year-floor(Year)) == 0.125)
###### Kobe trajectory
Dir_Kobe <- "D:/OneDrive - IATTC/IATTC/2025/SAC16/BET F30/Kobe/"
write.csv(SB_all, file = paste0(Dir_Kobe,"SBR_d_all.csv"))
library(tidyverse)
model <- c("Fix", "Gro", "Sel", "Mrt")
catchability <- c(1, 1.01, 1.02)
steepness <- c(1, 0.9, 0.8)
converge <- array(1, dim = c(length(model), length(catchability), length(steepness)))
converge[1, 3, 3] <- 0
converge[4, 2, 2:3] <- 0
fyear <- 1979 # first year
lyear <- 2023 # last year
FFleets <- 1:22 # fishery fleets
STD_only <- TRUE # no Kobe table is generated
###### Kobe trajectory
Dir_Kobe <- "D:/OneDrive - IATTC/IATTC/2025/SAC16/BET F30/Kobe/"
for (m in 1:length(model)) {
for (q in 1:1) {
for (s in 1:1) {
Path <- paste0(Dir_Kobe,model[m], "-", catchability[q], "-", steepness[s], "/")
# print(Path)
if(converge[m,q,s]) {
Kobe <- read.csv(paste0(Path,"KobePlotOut.csv"))
if(m+q+s==3) {
F_ts <- data.frame("F_mult"=as.numeric(Kobe[9,2:ncol(Kobe)]),
"Year"=seq(fyear+2,lyear),
"Model"=model[m],
"Catchability" = catchability[q],
"Steepness"=steepness[s])
SB_ts <- data.frame("SB"=as.numeric(Kobe[6,2:ncol(Kobe)]),
"Year"=seq(fyear+2,lyear),
"Model"=model[m],
"Catchability" = catchability[q],
"Steepness"=steepness[s])
}
else {
F_ts <- rbind(F_ts,data.frame("F_mult"=as.numeric(Kobe[9,2:ncol(Kobe)]),
"Year"=seq(fyear+2,lyear),
"Model"=model[m],
"Catchability" = catchability[q],
"Steepness"=steepness[s]))
SB_ts <- rbind(SB_ts,data.frame("SB"=as.numeric(Kobe[6,2:ncol(Kobe)]),
"Year"=seq(fyear+2,lyear),
"Model"=model[m],
"Catchability" = catchability[q],
"Steepness"=steepness[s]))
}
}
}
}
}
F_ts_mean <- F_ts %>%
group_by(Year) %>%
summarise(F_mult = mean(F_mult))
write.csv(F_ts_mean, paste0(Dir_Kobe,"F_trend.csv"), row.names = FALSE)
write.csv(F_ts, paste0(Dir_Kobe,"F_trend_all.csv"), row.names = FALSE)
install.packages("remotes")
remotes::install_github("r4ss/r4ss")
Path1 <- "C:/Users/hkxu/Desktop/EM/"
myreplist1 = SS_output(dir=Path1,covar=T)
library(r4ss)
myreplist1 = SS_output(dir=Path1,covar=T)
SS_plots(replist=myreplist1, forecastplot=T, uncertainty=T, datplot=T, btarg=0, minbthresh=0)
library(r4ss)
library(IATTCassessment)
Path1 <- "D:/OneDrive - IATTC/IATTC/2025/MSE/Test/HS1/EM/"
myreplist1 = SS_output(dir=Path1,covar=T)
dir_EM <- "D:/OneDrive - IATTC/IATTC/2025/MSE/Test/HS1/EM/"
# read EM output file
em_out <- r4ss::SS_output(dir_EM, covar = FALSE, verbose = FALSE, printstats = FALSE)
# max gradient
max_gradient <- em_out$maximum_gradient_component
# dynamic SBR
Dynamic_Bzero <- em_out$Dynamic_Bzero
SBR_d <- Dynamic_Bzero$SSB[nrow(Dynamic_Bzero)] / Dynamic_Bzero$SSB_nofishing[nrow(Dynamic_Bzero)]
SB <- Dynamic_Bzero$SSB[nrow(Dynamic_Bzero)]
# Find FHCR from the estimated Sbio using the HCR
Fadjust <- min(5 * SBR_d, 1)
# get Fmult
ForeRepName <- paste(dir_EM, "Forecast-report.SSO", sep = "")
# Get management report
ForeRepStart <- grep("Management_report", readLines(ForeRepName))
ForeRepEnd <- grep("THIS FORECAST IS FOR PURPOSES", readLines(ForeRepName))[1]
ForeDat <- read.table(file = ForeRepName, col.names = c(seq(1, 10, by = 1)), fill = T, quote = "", colClasses = "character",
nrows = ForeRepEnd - ForeRepStart, skip = ForeRepStart - 1)
ForeDat <- as.data.frame(ForeDat)
# get F30%
Fmult <- as.numeric(ForeDat[ForeDat[, 1] == c("Fmult"), 2])[3] # F30%
# get current F
FvectorRepStart <- grep("Seasonal_apicalF=Fmult", readLines(ForeRepName))
Fvector <- read.table(file = ForeRepName, nrows = 1, skip = FvectorRepStart[1] + 1)
Fvector <- Fvector[3:length(Fvector)]
Frecent <- sum(Fvector) # F
# Check the Fscale with the 10days maximum and re-adjust with Fscale = current opening +- 10 days / current opening
Fratio <- Fmult * Fadjust / Frecent # Fnew = Fmult * Fadjust
NewClosure <- 365 - (365 - CurrentClosure) * Fratio
CurrentClosure = 72
NewClosure <- 365 - (365 - CurrentClosure) * Fratio
if ((NewClosure - CurrentClosure) > 10) {
NewClosure <- CurrentClosure + 10
Fratio <- (365 - NewClosure) / (365 - CurrentClosure)
Fadjust <- Fratio * Frecent / Fmult
}
Fscale <- Fmult * Fadjust
# get Fmult
ForeRepName <- paste(dir_EM, "Forecast-report.SSO", sep = "")
# Get management report
ForeRepStart <- grep("Management_report", readLines(ForeRepName))
ForeRepEnd <- grep("THIS FORECAST IS FOR PURPOSES", readLines(ForeRepName))[1]
ForeDat <- read.table(file = ForeRepName, col.names = c(seq(1, 10, by = 1)), fill = T, quote = "", colClasses = "character",
nrows = ForeRepEnd - ForeRepStart, skip = ForeRepStart - 1)
ForeDat <- as.data.frame(ForeDat)
# get F30%
Fmult <- as.numeric(ForeDat[ForeDat[, 1] == c("Fmult"), 2])[3] # F30%
Fmult
# get current F
FvectorRepStart <- grep("Seasonal_apicalF=Fmult", readLines(ForeRepName))
Fvector <- read.table(file = ForeRepName, nrows = 1, skip = FvectorRepStart[1] + 1)
Fvector <- Fvector[3:length(Fvector)]
Frecent <- sum(Fvector) # F
Frecent
dir_EM_previous <- paste0("step", c("EM_Fix/", "EM_Mrt/", "EM_Sel/", "EM_Gro/"))
